# -*- coding: utf-8 -*-
"""tor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPcWV5LrzAl67rWaDLQkDecYF3wqZprD
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from google.colab import files
import os.path
from scipy import stats

directory="D:\Profiles\yjc010\Downloads\\"
#this is the directory to store the data
def store_tor_data(torm, tore,n):
  torm=np.array(torm)
  tore=np.array(tore)
  #torm and tore should be array of the same length
  data=np.concatenate((np.expand_dims(torm, 0), np.expand_dims(tore, 0)), axis=0)
  df = pd.DataFrame(data)
  df.to_csv("tor_joint"+str(n)+".csv")
  files.download("tor_joint"+str(n)+".csv")
  #df.to_csv(os.path.join(directory,"tor_joint"+str(n)+".csv"))
  return df
def get_tor_data(n):
  #function returns torm then tore
  data = pd.read_csv(directory+"tor_joint"+str(n)+".csv")
  data = data.to_numpy()
  return data[0,1:], data[1,1:]

def tor_plot(n):
  #n is the joint number. calling tor_plot(1) will show the computed torque(expected) vs torque(measured) plot of joint 1
  torm, tore = get_tor_data(n)  
  plt.scatter(torm, tore)
  m, b, r, p, std_err = stats.linregress(torm, tore)
  plt.plot(torm, m * torm + b,color="red")
  plt.xlabel('torm')
  plt.ylabel('tore')
  plt.title('torm vs tore of joint '+str(n)+' slope='+str(m)+' inter='+str(b))
  plt.show()
  return m, b

def tor_plot2(torm, tore):
  #n is the joint number. calling tor_plot2(1) will show the computed torque(expected) vs torque(measured) plot of joint 1
  plt.scatter(torm, tore)
  m, b, r, p, std_err = stats.linregress(torm, tore)
  plt.plot(torm, m * torm + b,color="red")
  plt.xlabel('torm')
  plt.ylabel('tore')
  plt.title('torm vs tore'+' slope='+str(m)+' inter='+str(b))
  plt.show()
  return m, b

torm=np.random.uniform(0,10,100)
tore=3*torm+np.random.normal(0,1,100)
tor_plot2(torm,tore)